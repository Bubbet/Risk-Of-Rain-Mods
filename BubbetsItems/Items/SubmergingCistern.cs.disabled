using BepInEx.Configuration;
using BubbetsItems.Helpers;
using RoR2;

namespace BubbetsItems.Items
{
    //TODO make tethering effect and item behavior, and tethering controller
	public class SubmergingCistern : ItemBase
	{
		private static ConfigEntry<float> _range;
		private static ConfigEntry<float> _amount;

		protected override void MakeConfigs(ConfigFile configFile)
		{
			defaultScalingFunction = "[a]";
			defaultScalingDesc = "[a] = item count";
			base.MakeConfigs(configFile);
			_range = configFile.Bind(ConfigCategoriesEnum.BalancingFunctions, "Submerging Cistern Range", 20f, "Range for the Submerging Cistern to heal within.");
			_amount = configFile.Bind(ConfigCategoriesEnum.BalancingFunctions, "Submerging Cistern Damage", 0.5f, "Damage percent to heal.");
		}

		protected override void MakeTokens()
		{
			base.MakeTokens();
			AddToken("SUBMERGINGCISTERN_NAME", "Submerging Cistern");
			AddToken("SUBMERGINGCISTERN_DESC", "Heal".Style(StyleEnum.Heal) + " nearby allies for " + "{3:P0}".Style(StyleEnum.Damage) + " of your " + "damage".Style(StyleEnum.Damage) + ". Divided over {0} teammates within {1}m." + "Consumes Mired Urn".Style(StyleEnum.Void) + ".");
			AddToken("SUBMERGINGCISTERN_PICKUP", "Heal nearby allies based on your damage. Divided over teammates in range.  " + "Consumes Mired Urn".Style(StyleEnum.Void) + ".");
			AddToken("SUBMERGINGCISTERN_LORE", "");
		}

		public override string GetFormattedDescription(Inventory inventory)
		{
			var amount = inventory?.GetItemCount(ItemDef) ?? 0;
			return Language.GetStringFormatted(ItemDef.descriptionToken,  "\n\n" + scaleConfig.Value + "\n" + scaleConfig.Description.Description.Split(';')[1],
				amount > 0 ? ScalingFunction(amount) : ScalingFunction(1), _range.Value, _amount.Value);
		}
		
		
	}
}