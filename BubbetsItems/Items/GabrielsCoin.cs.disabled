using System.Linq;
using System.Reflection;
using RoR2;

namespace BubbetsItems.Items
{
	public class GabrielsCoin : ItemBase
	{
		protected override void MakeTokens()
		{
			base.MakeTokens();
			AddToken("GABRIELSCOIN_NAME", "Gabriel's Coin");
			AddToken("GABRIELSCOIN_PICKUP", "");
			AddToken("GABRIELSCOIN_DESC", "");
			AddToken("GABRIELSCOIN_DESC_SIMPLE", "Upon making a attack onto a enemy, you have a 10% (Increase with coins found) for your attack to ricochet and hit another foe for half the original damage!");
			AddToken("GABRIELSCOIN_LORE", "");
		}

		protected override void MakeConfigs()
		{
			base.MakeConfigs();
			AddScalingFunction("0.1 + [c] * 0.01", "Ricochet Chance", "[a] = item count; [c] = current money;");
			AddScalingFunction("0.5 * [d]", "Damage", "[a] = item count; [d] = damage to deal;");
		}

		public override string GetFormattedDescription(Inventory? inventory, string? token = null, bool forceHideExtended = false)
		{
			scalingInfos[0].WorkingContext.c = 0;
			scalingInfos[1].WorkingContext.d = 1;
			return base.GetFormattedDescription(inventory, token, forceHideExtended);
		}

		protected override void MakeBehaviours()
		{
			base.MakeBehaviours();
			GlobalEventManager.onServerDamageDealt += DamageDealt;
		}

		protected override void DestroyBehaviours()
		{
			base.DestroyBehaviours();
			GlobalEventManager.onServerDamageDealt -= DamageDealt;
		}

		private static readonly MethodInfo? MemberwiseCloneRef = typeof(object).GetMethod(nameof(MemberwiseClone), BindingFlags.Instance | BindingFlags.NonPublic);

		private void DamageDealt(DamageReport damageInfo)
		{
			if (!damageInfo.attacker) return;
			var body = damageInfo.attackerBody;
			if (!body) return;
			var inv = body.inventory;
			if (!inv) return;
			var amount = inv.GetItemCount(ItemDef);
			if (amount <= 0) return;
			var info = scalingInfos[0];
			info.WorkingContext.c = body.master.money;

			if (!Util.CheckRoll(info.ScalingFunction(amount), damageInfo.attackerMaster)) return;

			var search = new BullseyeSearch
			{
				sortMode = BullseyeSearch.SortMode.Distance,
				searchOrigin = damageInfo.attacker.transform.position,
				teamMaskFilter = TeamMask.AllExcept(TeamIndex.Player),
			};
			search.RefreshCandidates();
			var results = search.GetResults();
			if (!results.Any()) return;
			if (!(MemberwiseCloneRef?.Invoke(damageInfo.damageInfo, new object[]{}) is DamageInfo dinfo)) return;
			var info2 = scalingInfos[1];
			info2.WorkingContext.d = dinfo.damage;
			dinfo.damage = info2.ScalingFunction(amount);
			var result = search.GetResults().First();
			//TODO make this a orb, use damageInfo.inflictor, and track the chain count using a component on the orb.
			result.healthComponent.TakeDamage(dinfo);
			Util.PlaySound("GabrielsCoinProc", damageInfo.attacker);
		}
	}
}